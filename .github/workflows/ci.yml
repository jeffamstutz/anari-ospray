## Copyright 2009 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

jobs:

### BUILD JOBS ###

  build-arch:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ospray/docker-images:arch
      cmd: |
        .github/workflows/build.sh -G Ninja
      artifact-out: build-arch
      artifact-path: build/install

  build-arch-clang:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ospray/docker-images:arch
      cmd: |
        CC=clang CXX=clang++ .github/workflows/build.sh -G Ninja
      artifact-out: build-arch-clang
      artifact-path: build/install

  build-rocky8:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: rockylinux:8.7
      cmd: |
        .github/workflows/build.sh
      artifact-out: build-rocky8
      artifact-path: build/install

  build-ubuntu18_04:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:18.04
      cmd: |
        .github/workflows/build.sh -G ninja
      artifact-out: build-ubuntu18_04
      artifact-path: build/install

  build-ubuntu20_04:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: |
        .github/workflows/build.sh -G ninja
      artifact-out: build-ubuntu20_04
      artifact-path: build/install

  build-ubuntu22_04:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:22.04
      cmd: |
        .github/workflows/build.sh -G ninja
      artifact-out: build-ubuntu22_04
      artifact-path: build/install

  build-osx:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      cmd: |
        .github/workflows/build.sh
      artifact-out: build-osx
      artifact-path: build/install

  build-windows-msvc15:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        .github\workflows\build.ps1 "Visual Studio 15 2017 Win64" "v141"
      artifact-out: build-windows-msvc15
      artifact-path: build/install

  build-windows-msvc17:
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        .github\workflows\build.ps1 "Visual Studio 17 2022" "v143"
      artifact-out: build-windows-msvc17
      artifact-path: build/install


###
### TEST JOBS ###

  test-arch:
    needs: build-arch
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ospray/docker-images:arch
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-arch

  test-arch-clang:
    needs: build-arch-clang
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ospray/docker-images:arch
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-arch-clang

  test-rocky8:
    needs: build-rocky8
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: rockylinux:8.7
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-rocky8

  test-ubuntu18_04:
    needs: build-ubuntu18_04
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:18.04
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-ubuntu18_04

  test-ubuntu20_04:
    needs: build-ubuntu20_04
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-ubuntu20_04

  test-ubuntu20_04-all:
    needs: build-ubuntu20_04
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: |
        LD_LIBRARY_PATH=./build/install/lib:./build/install/lib64:$LD_LIBRARY_PATH ANARI_LIBRARY=ospray ./build/install/bin/anariRenderTests
      artifact-in: build-ubuntu20_04

  test-ubuntu22_04:
    needs: build-ubuntu22_04
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:22.04
      cmd: |
        .github/workflows/test.sh
      artifact-in: build-ubuntu22_04

  test-osx:
    needs: build-osx
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      cmd: |
        .github/workflows/test.sh
        export DYLD_FALLBACK_LIBRARY_PATH=./build/install/lib
        export ANARI_LIBRARY=ospray
        ./build/install/bin/anariRenderTests
      artifact-in: build-osx

  test-windows-msvc15:
    needs: build-windows-msvc15
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        $env:ANARI_LIBRARY="ospray"
        ./build/install/bin/anariRenderTests
      artifact-in: build-windows-msvc15

  test-windows-msvc17:
    needs: build-windows-msvc17
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
        $env:ANARI_LIBRARY="ospray"
        ./build/install/bin/anariRenderTests
      artifact-in: build-windows-msvc17


###
### SCAN JOBS ###

  static-analysis:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@devel
    with:
      coverity: true
      project: ANARI OSPRay
      server: prod4
      prebuild: >
        cmake -DCMAKE_INSTALL_PREFIX=install -L -S ./superbuild -B build &&
        cmake --build build --parallel --target anari ospray
      build: cmake --build build --parallel --target anari-ospray

